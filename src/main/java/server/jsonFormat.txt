#### Login
{
'response': 'login',
'success': boolean,
'error' : errormessage (only if success == false)
}
{
'request': 'login',
'username': <username>
'password': "password"
}
#### Logout
{
'request': 'logout'
}
{
'response': 'logout',
'success': true
}

#### After clicking on an appointment
{
'request': PARTICIPANTSOFAPPOINTMENT,
'appointmentid': id
}
{
'response': PARTICIPANTSOFAPPOINTMENT,
'participants': ArrayList<Participant>
}

#### After creating an appointment
{
'request': 'newAppointment',
'appointment': {newAppointment json}
}
{
'response': 'newAppointment',
'status': 'success'
}
#### After changing participant status on an appointment

{'request': 'updateParticipantStatus',
'status': 'newStatus'
}
#### Get all users available
{ "request": GETUSERS,
}
{
"response": GETUSERS,
"users": ArrayList<User>
}

#### Update appointment
{ "request": UPDATEAPPOINTMENT
"appointment": appintmentObject
}
{ "response: UPDATEAPPOINTMENT,
"success": boolean, not success:
"error": errormessage
}

#### Get appointmentswhereuserisowner and APPOINTMENTWHEREUSERISPARTICIPANT
{ "request": APPOINTMENTSWHEREUSERISOWNER,
}
{ "response": APPOINTMENTSWHEREUSERISOWNER,
"appointments": ArrayList<Appoitment>
}

#### updateParticipantStatus
{"request": UPDATEPARTICIPANTSTATUS,
"appointmentID": int
"status" : Status;
}
No response unless error
#### getLoggedInUser
{"request": GETLOGGEDINUSER,
"key": key
}
{"response": GETLOGGEDINUSER,
"key": key,
"user": userObject
]

#### getStatusForAppointment
{"request": GETSTATUSFORAPPOINTMENT,
"key": key,
"appointmentid":int id
}
{ "response": GETSTATUSFORAPPOINTMENT,
"key": key,
"status": status
}